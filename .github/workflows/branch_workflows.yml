name: Branch workflows

on:
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'

      - name: Add permissions to gradlew
        run: chmod +x ./gradlew

      - name: Build with Projects
        run: ./gradlew build

      - name: Upload artifacts from build
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: build/


  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'

      - name: Add permissions to gradlew
        run: chmod +x ./gradlew

      - name: Run Tests
        run: ./gradlew test

  checkstyle:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'

      - name: Make Gradlew executable
        run: chmod +x ./gradlew

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest

  snyk-test:
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'

      - name: Install Snyk
        run: npm install -g snyk

      - name: Snyk authenticate
        run: snyk auth $SNYK_TOKEN

      - name: Add permissions to gradlew
        run: chmod +x ./gradlew

      - name: Build with Projects
        run: ./gradlew build

      - name: Run Snyk
        run: snyk test --all-sub-projects

  sonar-scan:
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    if: github.ref == 'refs/heads/main'
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'

      - name: Add permissions to gradlew
        run: chmod +x ./gradlew

      - name: SonarCloud Scan
        run: ./gradlew sonar -Dsonar.token=$SONAR_TOKEN

  coverage:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'gradle'

      - name: Add permissions to gradlew
        run: chmod +x ./gradlew

      - name: Fetch artifacts
        uses: actions/download-artifact@v2
        with:
          name: build-artifacts
          path: build/libs/

      - name: Check coverage
        run: ./gradlew jacocoTestCoverageVerification

  build-image:
    runs-on: ubuntu-latest
    needs: sonar-scan
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build docker
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/java-mock-app:latest .
        working-directory: .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/java-mock-app:latest

  deploy:
    needs: build-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v2

      - name: Start minikube
        uses: medyagh/setup-minikube@master

      - name: Pull Docker Image from Docker Hub
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/java-mock-app:latest

      - name: Deploy to minikube
        run:
          kubectl apply -f minikube/minikube.yml

      - name: Deploy rollout
        run: kubectl rollout status deployment/java-mock-deployment

      - name: Expose App
        run: |
          minikube service list
          minikube service java-mock-app-node-port --url
          curl $(minikube service java-mock-app-node-port --url)  

      - name: Stop app
        run: minikube stop